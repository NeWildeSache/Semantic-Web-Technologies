BASE <http://example.org/kulturarena/>
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl:  <http://www.w3.org/2002/07/owl#>
PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
PREFIX :     <http://example.org/kulturarena/>

GENERATE {
    GENERATE {
        ?musikdarbieter a :Musikdarbieter ;
                        :hatName "{?artist}"@de ;
                        :kommtAus ?land .
        ?land a :Land ;
              :hatName "{?country}"@de .
    }
    ITERATOR iter:Split(?countries, " / | /|/ |/| , | ,|, |,") AS ?country
    WHERE {
        BIND(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?country, "ä", "ae"), "ö", "oe"), "ü", "ue"), "Ä", "Ae"), "Ö", "Öe"), "Ü", "Ue") AS ?safeCountry)
        BIND(URI(fun:camelCase(?safeCountry)) AS ?land)
    }
    .
    GENERATE {
        [] a :Konzert ;
           :hatMusikdarbieter ?musikdarbieter ;
           :fandStattImJahr "{?year}"^^xsd:gYear .
    }
    ITERATOR iter:Split(?years, " / | /|/ |/| , | ,|, |,") AS ?year
    .
}
SOURCE <https://www.kulturarena.de/kuenstler-zu-gast-in-jena.html> AS ?html
ITERATOR iter:CSSPath(?html, "#article-17 > div > div:nth-child(3) > table > tbody > tr:not(:has(td.headline))", "tr td:nth-child(1)/text()", "tr td:nth-child(2)/text()", "tr td:nth-child(3)/text()") AS ?row ?artist ?countries ?years
WHERE {
    # remove special characters from artist name
    BIND(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(?artist, "ä", "ae"), "ö", "oe"), "ü", "ue"), "Ä", "Ae"), "Ö", "Öe"), "Ü", "Ue") AS ?almostSafeArtist)
    # create URI for artist (gets translated to ":musikdarbieter_<safeArtist>")
    BIND(URI(fun:camelCase(?almostSafeArtist)) AS ?musikdarbieter)
}
